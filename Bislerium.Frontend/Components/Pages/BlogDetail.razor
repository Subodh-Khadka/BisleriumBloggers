@page "/blogDetail/{blogId}"
@using Domain.Bislerium
@using Application.Bislerium
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using Newtonsoft.Json
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IBlogService BlogService
@inject ICommentService CommentService
@rendermode @(new InteractiveServerRenderMode(false));
@* @rendermode InteractiveServer *@

<style>
    .blog-header {
        box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;
    }
</style>

@if (blog != null)
{
    <h2 class="mb-3 text-center">Blog Details</h2>
    <hr />
    <div class="container">
        <div class="blog-header justify-content-center align-items-center p-3">
            <h1>@blog.Title</h1>
            <img src="https://localhost:7241/@blog.Image" alt="@blog.Id" style="max-width: 10%; max-height:10%" class="rounded-circle" />
            <div class="btn btn-group gap-2">
                <button class="btn btn-sm btn-primary" @onclick="() => UpVote()">@blog.UpVote <i class="bi bi-hand-thumbs-up"></i></button>
                <button class="btn btn-sm btn-warning" @onclick="() => DownVote()">@blog.DownVote <i class="bi bi-hand-thumbs-down"></i></button>
            </div>
            <p class="mt-3">@blog.Description</p>
        </div>

        <div>
            <h3 class="mt-4">Comments</h3>
            @if (commentList != null && commentList.Any())
            {
                @foreach (var comment in commentList)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <p class="card-text">@comment.Content</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="btn-group gap-2">
                                    <button class="btn btn-sm btn-primary" @onclick="() => UpVoteComment(comment)">
                                        <i class="bi bi-hand-thumbs-up"></i>
                                    </button>
                                    <button class="btn btn-sm btn-warning" @onclick="() => DownVoteComment(comment)">
                                        <i class="bi bi-hand-thumbs-down"></i>
                                    </button>
                                </div>
                                <small class="text-muted">Upvotes: @comment.UpVote | Downvotes: @comment.DownVote</small>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>No comments yet.</p>
            }
        </div>


        <h3>Add Comment</h3>
        <EditForm Model="@newComment" OnValidSubmit="@AddComment">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="">
                <InputTextArea @bind-Value="newComment.Content" class="form-control" placeholder="Enter your comment"></InputTextArea>
                <ValidationMessage For="@(() => newComment.Content)" />
            </div>
            <button type="submit" class="btn btn-primary mt-1 mb-1">Add Comment</button>
        </EditForm>


    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    Blog blog;
    List<Comment> commentList;

    [Parameter]
    public string blogId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(blogId))
        {
            await LoadComments();
            await LoadBlog();
        }
    }

    private async Task LoadBlog()
    {
        blog = await Http.GetFromJsonAsync<Blog>($"https://localhost:7241/GetBlogById/{blogId}");
    }

    private async Task LoadComments()
    {
        try
        {
            string apiUrl = $"https://localhost:7241/GetCommentsByBlogId?blogId={blogId}";

            var result = await Http.GetFromJsonAsync<List<Comment>>(apiUrl);

            if (result != null)
            {
                commentList = result;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error");
        }
    }


    private async Task UpVote()
    {
        blog.UpVote++;
        await UpdateBlogVotes();
    }

    private async Task DownVote()
    {
        blog.DownVote++;
        await UpdateBlogVotes();
    }

    private async Task UpdateBlogVotes()
    {
        try
        {
            var response = await Http.PutAsJsonAsync("https://localhost:7241/UpdateBlogVotes", blog);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo($"/blogDetail/{blog.Id}");
            }
            else
            {

            }
        }
        catch (Exception ex)
        {
        }
    }



    private Comment newComment = new Comment();

    private async Task AddComment()
    {
        newComment.Id = Guid.NewGuid();
        newComment.BlogId = Guid.Parse(blogId);
        newComment.UserId = "cb2030a7-9ce3-43a7-9827-39255dc1f185";
        newComment.CreatedDate = DateTime.Now;
        newComment.UpdateDate = DateTime.Now;

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7241/AddComment", newComment);

            if (response.IsSuccessStatusCode)
            {
                var addedComment = await response.Content.ReadFromJsonAsync<Comment>();
                if (addedComment != null)
                {
                    newComment = new Comment();
                    await LoadComments();
                }
                else
                {

                }
            }
            else
            {

            }
        }
        catch (Exception ex)
        {

        }
    }

    //votes of comment
    public async Task UpVoteComment(Comment comment)
    {
        comment.UpVote++;
        await UpdateCommentVotes(comment);
    }
    public async Task DownVoteComment(Comment comment)
    {
        comment.DownVote++;
        await UpdateCommentVotes(comment);
    }

    private async Task UpdateCommentVotes(Comment comment)
    {
        try
        {
            var response = await Http.PutAsJsonAsync("https://localhost:7241/UpdateComment", comment);

            if (response.IsSuccessStatusCode)
            {
                await LoadComments();
            }
            else
            {

            }
        }
        catch (Exception ex)
        {

        }
    }
}
